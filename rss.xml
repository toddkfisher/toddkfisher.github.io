<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[]]></title>
<description><![CDATA[]]></description>
<link>./</link>
<lastBuildDate>Mon, 26 Aug 2024 13:41:42 -0700</lastBuildDate>
<item>
  <title><![CDATA[Sound Playback Identifiers: Using Bitfields, Structs and Unions Instead of Handwritten Shifting, Masking and Or-ing]]></title>
  <description><![CDATA[

<div id="outline-container-org6283205" class="outline-2">
<h2 id="org6283205"><span class="section-number-2">1.</span> Motivation for Using Bitfields.</h2>
<div class="outline-text-2" id="text-1">
<p>
In my last programming-related post <sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>, I described how sound playback resources in
Miniaudio <sup><a id="fnr.2" class="footref" href="#fn.2" role="doc-backlink">2</a></sup> are referenced with a single <code>uint32_t</code>:
</p>

<ul class="org-ul">
<li>6 bit index into an array of Miniaudio resources <code>g_sound_list[]</code></li>
<li>26 bit playback serial number uniquely identifies a sound playback
request.</li>
</ul>

<p>
Both fields are doing double-duty:
</p>

<ul class="org-ul">
<li>If first 6 bits = <code>#b111111</code> then the following 26 bits are an error code.</li>
</ul>

<p>
Indices, serial numbers, and error-codes are set and accessed with seven functions in
the <code>sound.c</code> module.  These are simple shift (<code>&lt;&lt;</code>), mask (<code>&amp;</code>), and or (<code>|</code>) bit
manipulation functions.
</p>

<p>
A cleaner solution would use bitfields and let the compiler generate the
shifting, masking, and or-ing.
</p>
</div>
</div>

<div id="outline-container-org75e5846" class="outline-2">
<h2 id="org75e5846"><span class="section-number-2">2.</span> Two Different Definitions.</h2>
<div class="outline-text-2" id="text-2">
<p>
My first attempt at using bitfields:
</p>

<div class="org-src-container">
<label class="org-src-name"><span class="listing-number">Listing 1: </span><i>Playback ID structure using unions and bitfields</i>.</label><pre class="src src-C" id="org5969291"><span class="linenr"> 0: </span>typedef struct __attribute__((packed))
<span class="linenr"> 1: </span>{
<span class="linenr"> 2: </span>  union 
<span class="linenr"> 3: </span>  {
<span class="linenr"> 4: </span>    uint8_t id_idx : 6;
<span class="linenr"> 5: </span>    int8_t id_err_flag : 6;
<span class="linenr"> 6: </span>  };
<span class="linenr"> 7: </span>  union 
<span class="linenr"> 8: </span>  {
<span class="linenr"> 9: </span>    uint32_t id_serial_n : 26;
<span class="linenr">10: </span>    uint32_t id_error_code : 26;
<span class="linenr">11: </span>  };
<span class="linenr">12: </span>} playback_id_t;
</pre>
</div>

<p>
I expected <code>sizeof(playback_id_t) == 4</code> but it turned out to be 5 bytes so I abandoned
the idea for a while.  Another definition does yield <code>sizeof(playback_id_t) == 4</code>:
</p>

<div class="org-src-container">
<label class="org-src-name"><span class="listing-number">Listing 2: </span><i>Second attempt at defining playback ID structure.</i></label><pre class="src src-C" id="orgf5000a7"><span class="linenr">0: </span>typedef struct __attribute__((packed))
<span class="linenr">1: </span>{
<span class="linenr">2: </span>  int8_t   id_idx_or_error_flag : 6;
<span class="linenr">3: </span>  uint32_t id_serial_or_error_code : 26;
<span class="linenr">4: </span>} playback_id_t;
</pre>
</div>
<p>
So my compiler doesn't seem to be as smart as I'd hoped.
I'm happy with <code>typedef</code> <a href="#orgf5000a7">2</a> and I'll use that.
</p>
</div>
</div>

<div id="outline-container-org1630e4d" class="outline-2">
<h2 id="org1630e4d"><span class="section-number-2">3.</span> Warning</h2>
<div class="outline-text-2" id="text-3">
<p>
The C standard makes no guarantees about the ordering of bitfields.  In my initial
shift/mask/or implementation this was completely under my control.  In Lisp code
I could simply assume that an error flag test could be written:
</p>

<div class="org-src-container">
<pre class="src src-lisp">(let ((playback-id (snd:play-file-async "some-sound.mp3")))
    (when (= (logand #x3f playback-id) #x3f)
        ; Error
    ; ...
</pre>
</div>

<p>
We'll have to do some testing and see what happens when we use bitfields.
</p>
</div>
</div>

<div id="outline-container-org1225db7" class="outline-2">
<h2 id="org1225db7"><span class="section-number-2">4.</span> Today's Agenda</h2>
<div class="outline-text-2" id="text-4">
<ol class="org-ol">
<li>Fidget around and test bit ordering in <code>typedef</code> <a href="#orgf5000a7">2</a>.</li>
<li>Add definition <a href="#orgf5000a7">2</a> to <code>sound.c</code>.</li>
<li>Replace shift/mask/&#x2026; function calls on <code>playback_id</code> values with ordinary
field references</li>
</ol>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="./2024-08-18-tightening-up-sound-c.html">Tightening Up sound.c</a>  
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
See <a href="https://miniaud.io/">https://miniaud.io/</a>  
</p></div></div>


</div>
</div><div class="taglist"></div>
<h3>END</h3>

<hr>

]]></description>
  <link>./2024-08-26-bitfields-structs-and-unions-in-c.html</link>
  <guid>./2024-08-26-bitfields-structs-and-unions-in-c.html</guid>
  <pubDate>Mon, 26 Aug 2024 10:43:00 -0700</pubDate>
</item>
<item>
  <title><![CDATA[Choosing an Open-Source License]]></title>
  <description><![CDATA[
<p>
<b>Prevous livestream:</b>
</p>

<p>
<a href="https://www.youtube.com/live/DmznJlAIwsE">https://www.youtube.com/live/DmznJlAIwsE</a>
</p>

<div id="outline-container-org80175eb" class="outline-2">
<h2 id="org80175eb"><span class="section-number-2">1.</span> The Source Code for These Streams Should be Available on Github.</h2>
<div class="outline-text-2" id="text-1">
<p>
I believe that it's time to put the source code for my game project up on a Github repo.
This should include instructions on how to build and run.  At a minimum, you will need:
</p>
<ul class="org-ul">
<li><code>clang</code>,</li>
<li><code>SBCL</code> <sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>,</li>
<li><code>Emacs</code>, and</li>
<li><code>Sly</code> <sup><a id="fnr.2" class="footref" href="#fn.2" role="doc-backlink">2</a></sup> or <code>SLIME</code> <sup><a id="fnr.3" class="footref" href="#fn.3" role="doc-backlink">3</a></sup>.</li>
</ul>
</div>
</div>

<div id="outline-container-org9ac8ee7" class="outline-2">
<h2 id="org9ac8ee7"><span class="section-number-2">2.</span> Two Major Categories of Licenses.</h2>
<div class="outline-text-2" id="text-2">
<p>
Unfortunately I must release the code under some sort of open source license.
I would prefer that my work isn't stolen. In today's stream, I'll compare various
licenses.  Codeacademy <sup><a id="fnr.4" class="footref" href="#fn.4" role="doc-backlink">4</a></sup> gives is a good starting point:
</p>

<blockquote>
<p>
Most licenses fit into one of two broad categories: copyleft licenses or
permissive licenses. Depending on how you want other people to use your project,
you can narrow your choice down to one of these two categories.
</p>

<p>
[&#x2026;]
</p>

<p>
<b>COPYLEFT LICENSES</b>
</p>

<p>
A <b>copyleft</b> license requires that any modified version of an open source
project also be released under the same license as the original project.
</p>

<p>
[&#x2026;]
</p>

<p>
<b>PERMISSIVE LICENSES</b>
</p>

<p>
The other general category of open source licenses is <b>permissive</b>
licenses. Permissive licenses are different from copyleft licenses in that they
do not put restrictions on people modifying or redistributing a project.
</p>
</blockquote>

<p>
I'm going to select a copyleft license.
</p>
</div>
</div>

<div id="outline-container-orge5bc21f" class="outline-2">
<h2 id="orge5bc21f"><span class="section-number-2">3.</span> How Many Licenses Are Out There?</h2>
<div class="outline-text-2" id="text-3">
<p>
Wikipedia's <i>Comparison of free and open-source software licenses</i> <sup><a id="fnr.5" class="footref" href="#fn.5" role="doc-backlink">5</a></sup>
has a 41 row table comparison.
</p>
</div>
</div>

<div id="outline-container-org79a8955" class="outline-2">
<h2 id="org79a8955"><span class="section-number-2">4.</span> What I Want From a License.</h2>
<div class="outline-text-2" id="text-4">
<p>
It is very unlikely that anyone will "steal" the code for this tiny
project and close-source it for profit.  It's a good idea though to be aware of the major
FOSS licenses should you contribute to or create a larger project.
</p>

<p>
Here are my license preferences:
</p>
<ol class="org-ol">
<li>No one can make any money off of my work or any work derived from
it.</li>
<li>No one can take my work, modify it (even slightly) and
not credit me.</li>
<li>My original work and anything derived from it must always
be available in source form.</li>
</ol>
</div>
</div>

<div id="outline-container-org01fad65" class="outline-2">
<h2 id="org01fad65"><span class="section-number-2">5.</span> How Do the Major FOSS Licenses Stack Up?</h2>
<div class="outline-text-2" id="text-5">
<p>
Github has a website <sup><a id="fnr.6" class="footref" href="#fn.6" role="doc-backlink">6</a></sup> which compares eight popular FOSS licenses.  None of these
seems to satisfy criteral No. 1 above.
</p>

<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">

<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Name</th>
<th scope="col" class="org-left">Type</th>
<th scope="col" class="org-left">Criteria Satisfied</th>
<th scope="col" class="org-left">Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">GNU AGPLv3</td>
<td class="org-left">copyleft</td>
<td class="org-left">2 &amp; 3</td>
<td class="org-left">Same as GPLv3 but network use is distribution</td>
</tr>

<tr>
<td class="org-left">GNU GPLv3</td>
<td class="org-left">copyleft</td>
<td class="org-left">2 &amp; 3</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">GNU LGPLv3</td>
<td class="org-left">copyleft</td>
<td class="org-left">2 &amp; 3</td>
<td class="org-left">(see below)</td>
</tr>

<tr>
<td class="org-left">Mozilla Public License 2.0</td>
<td class="org-left">?</td>
<td class="org-left">none</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">Apache License 2.0</td>
<td class="org-left">permissive</td>
<td class="org-left">none</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">MIT License</td>
<td class="org-left">permissive</td>
<td class="org-left">none</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">Boost Software License 1.0</td>
<td class="org-left">permissive</td>
<td class="org-left">none</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">The Unlicense</td>
<td class="org-left">?</td>
<td class="org-left">none</td>
<td class="org-left">No conditions</td>
</tr>
</tbody>
</table>

<p>
LGPLv3 allows close-source software to include your work as long as:
</p>
<ul class="org-ul">
<li>Your source code is published and</li>
<li>The closed-source software uses your software through whatever interfaces are provided
(e.g. public functions in a shared-object library)</li>
</ul>
</div>
</div>

<div id="outline-container-org95ef680" class="outline-2">
<h2 id="org95ef680"><span class="section-number-2">6.</span> Conclusion</h2>
<div class="outline-text-2" id="text-6">
<p>
Any project that uses an AGPLv3 or GPLv3 licensed source-code is bound to the same terms.
AGPLv3 is the most restrictive of the two so I'm choosing that.
</p>

<p>
Now that I have this taken care of, I can move on to more interesting topics.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="http://sbcl.org">Steel Bank Common Lisp</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://joaotavora.github.io/sly/">Sly Common Lisp IDE</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3" role="doc-backlink">3</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://slime.common-lisp.dev/">The Superior Lisp Interaction Mode for Emacs</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4" role="doc-backlink">4</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
codeacademy: <a href="https://www.codecademy.com/article/choosing-an-open-source-license">Choosing An Open Source License</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.5" class="footnum" href="#fnr.5" role="doc-backlink">5</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Wikipedia: <a href="https://en.wikipedia.org/wiki/Comparison_of_free_and_open-source_software_licenses">Comparison of Free and Open-Source Software Licenses</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.6" class="footnum" href="#fnr.6" role="doc-backlink">6</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Github: <a href="https://choosealicense.com/">Choose an open source license</a> and <a href="https://choosealicense.com/licenses/">Licenses</a>
</p></div></div>


</div>
</div><div class="taglist"></div>
<h3>END</h3>

<hr>

]]></description>
  <link>./2024-08-21-foss-licenses-and-how-i-publish-livestream-notes.html</link>
  <guid>./2024-08-21-foss-licenses-and-how-i-publish-livestream-notes.html</guid>
  <pubDate>Wed, 21 Aug 2024 20:04:00 -0700</pubDate>
</item>
<item>
  <title><![CDATA[Tightening Up sound.c]]></title>
  <description><![CDATA[
<p>
<b>Previous Stream:</b>
<a href="https://www.youtube.com/watch?v=L-ri_PFpmcA">https://www.youtube.com/watch?v=L-ri_PFpmcA</a>
</p>

<div id="outline-container-orgbebd31b" class="outline-2">
<h2 id="orgbebd31b"><span class="section-number-2">1.</span> Playback Serial Numbers.</h2>
<div class="outline-text-2" id="text-1">
<p>
In my first draft of <code>sound.c</code>, a typical use might be:
</p>
<ol class="org-ol">
<li>Client requests playback by calling <code>snd_play_mem_async()</code> or
<code>snd_play_file_async()</code>.</li>
<li>Index into the resource list (<code>g_sound_list[]</code>) returned on success and sound begins playing.</li>
<li>Sound cancellation (freeing of Miniaudio <sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup> resources) occurs by:
<ul class="org-ul">
<li>In-progress playback can be cancelled by calling <code>snd_cancel_async(idx)</code>
where <code>idx</code> is the index returned in step 1. <b>OR</b></li>
<li>Playback completes.</li>
</ul></li>
</ol>

<p>
After thinking for a bit, I realized that the following could occur.
</p>

<ol class="org-ol">
<li>Steps 1-3 above.</li>
<li>After playback, client requests playback of another sound and receives <i>the same</i> index
as in step 2. above.</li>
<li>Another part of the client code believes that the original playback above is still in
progress and requests cancellation.</li>
<li>New playback using same index is cancelled instead.</li>
</ol>

<p>
A solution is to simply modify <code>snd_play_(mem|file)_async()</code> to instead
return a pair: <code>(serial_number, resource_index)</code> where <code>serial_number</code> is
unique for each playback request <sup><a id="fnr.2" class="footref" href="#fn.2" role="doc-backlink">2</a></sup>.  To cancel, <code>snd_cancel_async()</code> would
take the serial number and index as parameters. It should be an error condition, if the
client attempts to stop playback with a serial number that has "expired".
</p>
</div>
</div>

<div id="outline-container-org2a8f64c" class="outline-2">
<h2 id="org2a8f64c"><span class="section-number-2">2.</span> Playback ID format.</h2>
<div class="outline-text-2" id="text-2">
<p>
Figure <a href="#orgc014fb7">1</a> <sup><a id="fnr.3" class="footref" href="#fn.3" role="doc-backlink">3</a></sup> below shows how the <code>serial_number</code> and <code>resource_index</code> bits are
smashed together into a single <code>uint32_t</code>  Note that serial numbers are 26 bits
wide and "wrap around" after approximately 67.1 million plays - an acceptable number
(for me at least) <sup><a id="fnr.4" class="footref" href="#fn.4" role="doc-backlink">4</a></sup>.
</p>


<figure id="orgc014fb7">
<img src="./playback-id-bit-layout.png" alt="playback-id-bit-layout.png" width="65%">

<figcaption><span class="figure-number">Figure 1: </span><i>Playback ID bit layout.</i></figcaption>
</figure>

<p>
Since we must also signal error conditions to a caller and since we're returning a single
<code>uint32_t</code>, some range of possible values must represent an error condition.  See figure
<a href="#orgd6e2cb0">2</a> <sup><a id="fnr.5" class="footref" href="#fn.5" role="doc-backlink">5</a></sup> <sup>, </sup><sup><a id="fnr.6" class="footref" href="#fn.6" role="doc-backlink">6</a></sup>.
</p>


<figure id="orgd6e2cb0">
<img src="./bit-layout-error.png" alt="bit-layout-error.png" width="65%">

<figcaption><span class="figure-number">Figure 2: </span><i>Bit layout for error condition.</i></figcaption>
</figure>


<p>
As it stands today, listing <a href="#org7fad079">1</a> is the <code>struct</code> used in Miniaudio resource management:
</p>

<div class="org-src-container">
<label class="org-src-name"><span class="listing-number">Listing 1: </span><i>C struct for Miniaudio resource management.</i></label><pre class="src src-C" id="org7fad079"><span class="linenr"> 0: </span>// Member prefix "s_" == "sound"
<span class="linenr"> 1: </span>typedef struct
<span class="linenr"> 2: </span>{
<span class="linenr"> 3: </span>  // Miniaudio resource.  Created/destroyed each time a sound is played/stopped.
<span class="linenr"> 4: </span>  ma_device        s_device;         
<span class="linenr"> 5: </span>  ma_device_config s_device_config;
<span class="linenr"> 6: </span>  // Miniaudio resource.  Created/destroyed each time a sound is played/stopped.
<span class="linenr"> 7: </span>  ma_decoder       s_decoder;        
<span class="linenr"> 8: </span>  // Sound play is cancelled but not necessarily stopped yet.
<span class="linenr"> 9: </span>  atomic_bool      s_cancel_sent;    
<span class="linenr">10: </span>  // Miniaudio resources in this slot available for playback or is this slot currently in use or in
<span class="linenr">11: </span>  // the process of being cancelled.
<span class="linenr">12: </span>  atomic_bool      s_is_available;   
<span class="linenr">13: </span>  // Unique identifier returned when playback is initiated.
<span class="linenr">14: </span>  // Format:                                                     
<span class="linenr">15: </span>  //          - bits [0:5] Index of sound resource in 'g_sound_list[]'
<span class="linenr">16: </span>  //                       If = 0x3f (= 0b111111), then this id is an error code.
<span class="linenr">17: </span>  //          - bits [8:32] Serial # uniquely identifying playback request.
<span class="linenr">18: </span>  //                       If bits [0:5] = 0b111111, then bits[8:32] are identify the
<span class="linenr">19: </span>  //                       specific error code.
<span class="linenr">20: </span>  //          NOTE: Encoding index/serial#/error code into a single uint32_t means that
<span class="linenr">21: </span>  //          we can pass around and return these as a single number.
<span class="linenr">22: </span>  uint32_t         s_playback_id;
<span class="linenr">23: </span>  // Index of these miniaudio resources in 'g_sound_list[]'.  Redundant since
<span class="linenr">24: </span>  // bits [0:5] of 's_playback_id' hold the same index.
<span class="linenr">25: </span>  uint32_t         s_idx_sound_list; 
<span class="linenr">26: </span>  // Playing from file or from memory?
<span class="linenr">27: </span>  source_type_t    s_source_type;    
<span class="linenr">28: </span>  union
<span class="linenr">29: </span>  {
<span class="linenr">30: </span>    // Pointer to memory block of preloaded sound file.
<span class="linenr">31: </span>    void           *s_p_preloaded_sound;
<span class="linenr">32: </span>    // ... Or jus the filepath if not preloaded.
<span class="linenr">33: </span>    ASCII          s_file_path[FILENAME_MAX];
<span class="linenr">34: </span>  };
<span class="linenr">35: </span>} sound_t;
</pre>
</div>
</div>
</div>

<div id="outline-container-org23a4f25" class="outline-2">
<h2 id="org23a4f25"><span class="section-number-2">3.</span> Today's Agenda</h2>
<div class="outline-text-2" id="text-3">
<ol class="org-ol">
<li>The code to create/extract (<code>serial_number</code>, <code>resource_index</code>) pairs from <code>uint32_t</code>'s has been written
but isn't used anywhere.  Modify any affected function in <code>sound.c</code></li>
<li>Walk through <code>sound.c</code> and <i>informally</i> convince ourselves that there are no
race conditions or deadlocks.</li>
</ol>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
See <a href="https://miniaud.io/">https://miniaud.io/</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
(<code>serial_number</code>, <code>resource_index</code>) pairs are smashed into a single
<code>uint32_t</code> which the CFFI client will pass to <code>snd_cancel_async()</code>. I would
prefer to return two values but I don't know of a simple way to do this in CFFI
(at the time of writing this).
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3" role="doc-backlink">3</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Image created with <a href="http://draw.io">Draw.io</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4" role="doc-backlink">4</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
This won't work if we have sounds that repeat endlessly.  It's possible that
67 million sounds could have been played and wraparound could
clobber any long-running playback.
</p></div></div>

<div class="footdef"><sup><a id="fn.5" class="footnum" href="#fnr.5" role="doc-backlink">5</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Perhaps C's bitfield feature would be more appropriate here.  
</p></div></div>

<div class="footdef"><sup><a id="fn.6" class="footnum" href="#fnr.6" role="doc-backlink">6</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Placing the 6-bit error field in bits [26:31] would make checking for error codes simpler.  For example:
</p>
<div class="org-src-container">
<pre class="src src-lisp"><span class="linenr">0: </span>(let ((playback-id (snd:play-file-async "some-sound.mp3")))
<span class="linenr">1: </span>  (when (&gt;= playback-id #xfc000000) ; #xfc000000 = #b11111100000000000000000000000000
<span class="linenr">2: </span>      ; Error
<span class="linenr">3: </span>  ; ... 
</pre>
</div>
<p class="footpara">
As opposed to:
</p>
<div class="org-src-container">
<pre class="src src-lisp"><span class="linenr">0: </span>(let ((playback-id (snd:play-file-async "some-sound.mp3")))
<span class="linenr">1: </span>  (when (= (logand #x3f playback-id) #x3f)
<span class="linenr">2: </span>      ; Error
<span class="linenr">3: </span>  ; ... 
</pre>
</div></div></div>


</div>
</div><div class="taglist"></div>
<h3>END</h3>

<hr>

]]></description>
  <link>./2024-08-18-tightening-up-sound-c.html</link>
  <guid>./2024-08-18-tightening-up-sound-c.html</guid>
  <pubDate>Sun, 18 Aug 2024 13:43:00 -0700</pubDate>
</item>
<item>
  <title><![CDATA[Error Handling in the sound.c Module]]></title>
  <description><![CDATA[
<p>
<b>Previous livestreams</b>
</p>

<p>
<a href="https://www.youtube.com/watch?v=5OrYG_7_uHY">https://www.youtube.com/watch?v=5OrYG_7_uHY</a>
</p>

<p>
<a href="https://www.youtube.com/watch?v=L-ri_PFpmcA">https://www.youtube.com/watch?v=L-ri_PFpmcA</a>
</p>

<div id="outline-container-orgbf3c8c6" class="outline-2">
<h2 id="orgbf3c8c6"><span class="section-number-2">1.</span> Today's Agenda</h2>
<div class="outline-text-2" id="text-1">
<p>
The wrapper code for Miniaudio <sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup> low-level playback has been added to
<code>sound.c</code> and all compiler errors removed.  It is time to walk through
the code to convince myself that it's correct.  I will also add error-handling
and error-cleanup code as described below.
</p>
</div>
</div>

<div id="outline-container-org757a702" class="outline-2">
<h2 id="org757a702"><span class="section-number-2">2.</span> Error-Handling and Cleanup</h2>
<div class="outline-text-2" id="text-2">
<p>
I'm going to call this a "crabs in a bucket" strategy: "If I couldn't do something
then no one else can either."  Any pthreads or Miniaudio function call that returns
an error code will result in:
</p>
<ol class="org-ol">
<li>The line number, API, and error code are saved into global variables.</li>
<li>A global flag: <code>g_something_failed</code> is set to true.</li>
</ol>
<p>
Every function call in <code>sound.c</code> will begin with code similar to:
</p>
<div class="org-src-container">
<pre class="src src-C">if (atomic_load(&amp;g_something_failed))
  return /* some error code */
</pre>
</div>
<p>
Lisp code that calls exported functions in <code>libsound.so</code> should check for error codes.
On receiving an error the Lisp code should signal an error and provide restarts <sup><a id="fnr.2" class="footref" href="#fn.2" role="doc-backlink">2</a></sup> if
appropriate.
</p>
</div>
</div>
<div id="outline-container-org193dd5d" class="outline-2">
<h2 id="org193dd5d"><span class="section-number-2">3.</span> Error Cleanup</h2>
<div class="outline-text-2" id="text-3">
<p>
The destructor function in <code>sound.c</code> :
</p>
<div class="org-src-container">
<pre class="src src-C">void __attribute__((destructor)) snd_shared_object_uninit(void)
</pre>
</div>
<p>
Should terminate <code>snd_cancel_thread()</code> with:
</p>
<div class="org-src-container">
<pre class="src src-C">atomic_store(&amp;g_stop_cancel_thread, true);  // stop snd_cancel_thread() if it's awake and running.
pthread_mutex_lock(&amp;g_mtx_sound_list);
pthread_cond_signal(&amp;g_cnd_cancel);  // get snd_cancel_thread() ready to wake
pthread_mutex_unlock(&amp;g_mtx_sound_list);  // wake snd_cancel_thread().
</pre>
</div>
<p>
When <code>snd_cancel_thread()</code> is awakened it will free up any Miniaudio resources in use.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
See <a href="https://miniaud.io/">https://miniaud.io/</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
One such restart might be to unload then reload <code>libsound.so</code> and continue program execution.
</p></div></div>


</div>
</div><div class="taglist"></div>
<h3>END</h3>

<hr>

]]></description>
  <link>./2024-08-05-error-handling-in-the-sound.c-module.html</link>
  <guid>./2024-08-05-error-handling-in-the-sound.c-module.html</guid>
  <pubDate>Mon, 05 Aug 2024 12:15:00 -0700</pubDate>
</item>
<item>
  <title><![CDATA[Continuing Sound-Related Coding]]></title>
  <description><![CDATA[
<p>
<b>Prevous livestream:</b>
</p>

<p>
<a href="https://youtube.com/live/i-WEMsvJoJw">https://youtube.com/live/i-WEMsvJoJw</a>
</p>

<p>
In my last livestream, I "tested" asychronous sound playback/stop using
Miniaudio's <sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup> low-level API.  All of this code lived in <code>simple-playback.c</code> which was
intended as a proof-of-concept.  Today I'll be moving code to <code>sound.c</code> which
compiles to a dynamically-loaded library <code>libsound.so</code>.  Once we have a working
<code>libsound</code> we can stress-test our sound code in Lisp.
</p>

<p>
<b>Warning:</b> this will be sleep-inducing as it's mostly copy/paste and fixing compilation errors.
</p>

<p>
<b>2nd Warning:</b> it's a lovely afternoon outside and I have my patio door open, which means
there might be some noise in the background.
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
See <a href="https://miniaud.io/">https://miniaud.io/</a>
</p></div></div>


</div>
</div><div class="taglist"></div>
<h3>END</h3>

<hr>

]]></description>
  <link>./2024-08-03-moving-code-to-sound.c-shared-object.html</link>
  <guid>./2024-08-03-moving-code-to-sound.c-shared-object.html</guid>
  <pubDate>Sat, 03 Aug 2024 13:04:00 -0700</pubDate>
</item>
<item>
  <title><![CDATA[Testing Sound Playback]]></title>
  <description><![CDATA[
<p>
<b>Previous livestreams:</b>
</p>

<p>
<a href="https://www.youtube.com/watch?v=49ojU19ruHk">https://www.youtube.com/watch?v=49ojU19ruHk</a>
</p>

<p>
<a href="https://www.youtube.com/watch?v=8zS1ABTCTmos">https://www.youtube.com/watch?v=8zS1ABTCTmos</a>
</p>

<div id="outline-container-orgd4f54e8" class="outline-2">
<h2 id="orgd4f54e8"><span class="section-number-2">1.</span> Today's Agenda</h2>
<div class="outline-text-2" id="text-1">
<p>
I  have  a  small  test   program,  <code>simple-playback.c</code>,  which  uses  Miniaudio
(<a href="https://miniaud.io/">https://miniaud.io/</a>)   for  asychronous   sound   playback  and   cancellation.
<code>simple-playback.c</code>  is  a  "wrapper"  around Miniaudio's  low-level  API.   The
low-level  API  must  be  used  to play sound  files  preloaded  into  memory  (see
<a href="2024-07-28-playing-sounds-using-in-memory-blobs.html">Livestream  post 28-July-24</a>)  The wrapper  code in  <code>simple-playback.c</code> will  be
tested today  (hopefully) and I'll  begin moving functions prefixed  with <code>snd_</code>
over to the <code>sound.c</code> module.  <code>sound.c</code> compiles to <code>libsound.so</code>.  Once that's
complete, we should be able to use Lisp/CFFI to call exported functions from the
Lisp REPL.
</p>
</div>
</div>

<div id="outline-container-org41e035b" class="outline-2">
<h2 id="org41e035b"><span class="section-number-2">2.</span> Exporting C Functions to Lisp</h2>
<div class="outline-text-2" id="text-2">
<p>
A note about what  I mean by "exporting functions to Lisp/CFFI".   I have a Lisp
program <code>cffi-gen.lisp</code> which parses a limited form of C function declarations:
</p>


<figure id="org049f5c9">
<img src="./CFFI-line-syntax.PNG" alt="CFFI-line-syntax.PNG" width="65%">

<figcaption><span class="figure-number">Figure 1: </span><i>Syntax for C functions exported to Lisp/CFFI. (using: <a href="https://www.bottlecaps.de/rr/ui">https://www.bottlecaps.de/rr/ui</a>)</i></figcaption>
</figure>

<p>
and produces the appropriate Lisp/CFFI <code>defcfun</code>.  <i>type-names</i> and the <i>parameter-list</i> are
severly restricted but adequate for this project.
</p>

<p>
For example, the C function declaration:
</p>

<div class="org-src-container">
<pre class="src src-C">void ui_set_kbd_repeat(uint32_t timeout_ms, uint32_t delay_ms)  // EXPORT
</pre>
</div>

<p>
Produces:
</p>

<div class="org-src-container">
<pre class="src src-lisp"><span class="linenr">0: </span>(cffi:defcfun ("ui_set_kbd_repeat" set-kbd-repeat) :void
<span class="linenr">1: </span>              (timeout-ms :uint32)
<span class="linenr">2: </span>              (delay-ms :uint32))
<span class="linenr">3: </span>(export 'set-kbd-repeat)
</pre>
</div>

<p>
when run through <code>cffi-gen.lisp</code>.
</p>
</div>
</div>
<div class="taglist"></div>
<h3>END</h3>

<hr>

]]></description>
  <link>./2024-07-30-testing-sound-playback.html</link>
  <guid>./2024-07-30-testing-sound-playback.html</guid>
  <pubDate>Tue, 30 Jul 2024 12:54:00 -0700</pubDate>
</item>
<item>
  <title><![CDATA[Playing Sounds Using In-Memory BLOBS]]></title>
  <description><![CDATA[
<p>
<b>Binary large object (BLOB)</b>
<i>is a generic term used to  describe the handling and</i>
<i>storage of  long strings  of data by  database management systems.  A BLOB  is a</i>
<i>category of data,  characterized by large size (including media  formats such as</i>
<i>audio and video), which can place extreme demands on storage systems and network</i>
<i>bandwidth.</i>
<a href="https://www.gartner.com/en/information-technology/glossary/blob-binary-large-object">Gartner.com</a>
</p>

<p>
<b>Summary:</b> I  briefly describe how  thread-based resource management is  used in
<del><code>sound.c</code></del> <code>simple-playback.c</code>  and how it  will be modified to  play preloaded
sound files residing in memory.
</p>

<div id="outline-container-org2719b56" class="outline-2">
<h2 id="org2719b56"><span class="section-number-2">1.</span> SOUND PLAYBACK AND RESOURCE MANAGEMENT.</h2>
<div class="outline-text-2" id="text-1">
<p>
<code>Miniaudio</code> has a simple way of playing a sound file:
<code>ma_engine_play_sound()</code> which is adequate for asynchronously loading and
playing sounds.  We would like to preload sounds and play them from memory but
there is no simple high-level function for this.  We must resort to <code>Miniaudio</code>'s
"low-level" API.
</p>

<p>
To play sounds through the low-level API we must:
</p>
<ol class="org-ol">
<li>Create an <code>ma_decoder</code> from a file or block of memory.  The decoder must
be configured for sample format, channel count, and sample rate.</li>
<li>An <code>ma_device</code> must be configured and initialized.  The device contains references
to the decoder created in step 1 as well as a callback function which uses the decoder to
provide <code>Miniaudio</code> with frames (a frame is a set of samples: one per channel).</li>
<li>We must start the device. This begins playing the sound.</li>
</ol>

<p>
End of playback is detected in our data callback:
</p>

<div class="org-src-container">
<pre class="src src-C">if (MA_AT_END == ma_decoder_read_pcm_frames(pDecoder, pOutput, frameCount, NULL))
  // ...
</pre>
</div>

<p>
And we free Miniaudio resources with <code>ma_device_uninit()</code> and <code>ma_decoder_uninit()</code> but
this <i>must not happen</i> in the data callback, it must occur in another thread. <sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>
To overcome this restriction we have a separate thread function, <code>snd_cancel_thread()</code>:
which calls <code>ma_(device|decoder)_uninit()</code> when a condition <code>g_cnd_cancel</code> is
signalled.
</p>

<p>
In <code>sound.c</code>,  devices and decoders  are stored in an  array: <code>g_sound_list[]</code>.
Each entry  in <code>g_sound_list[]</code> is a  structure which holds an  "is available"
flag:
</p>

<div class="org-src-container">
<label class="org-src-name"><span class="listing-number">Listing 1: </span><i>Data structures for storing sounds during playback.</i></label><pre class="src src-C"><span class="linenr"> 0: </span>typedef struct
<span class="linenr"> 1: </span>{
<span class="linenr"> 2: </span>  ma_device        s_device;
<span class="linenr"> 3: </span>  ma_device_config s_device_config;
<span class="linenr"> 4: </span>  ma_decoder       s_decoder;
<span class="linenr"> 5: </span>  atomic_bool      s_cancel_sent;
<span class="linenr"> 6: </span>  atomic_bool      s_is_available;
<span class="linenr"> 7: </span>  int              s_idx_sound_list;
<span class="linenr"> 8: </span>} sound_t;
<span class="linenr"> 9: </span>
<span class="linenr">10: </span>// Array of sound resources.
<span class="linenr">11: </span>// IF g_sound_list[i].s_is_available &amp;&amp; !g_sound_list[i].s_cancel_sent THEN:
<span class="linenr">12: </span>//
<span class="linenr">13: </span>//   slot i may be used as a decoder and device to play a sound.
<span class="linenr">14: </span>//
<span class="linenr">15: </span>// NOTE that there is no free list of available slots.  The list must be scanned to find
<span class="linenr">16: </span>// a free slot i.
<span class="linenr">17: </span>#define MAX_SOUNDS 25
<span class="linenr">18: </span>sound_t g_sound_list[MAX_SOUNDS];
</pre>
</div>

<p>
Sound playback is achieved  with <code>snd_play_file_async()</code> which finds an
index of an available device/decoder and then proceeds with steps 1-3 above.  And
the resources in <code>g_sound_list[</code> <i>&lt;index&gt;</i> <code>]</code> are made unavailable.
</p>

<p>
Cancellation of a sound can occur when a sound has completed playing or during
playback.  <code>snd_cancel_async()</code> places the an index of an entry in <code>g_sound_list[]</code>
onto <code>g_cancel_list[]</code> and signals <code>g_cnd_cancel</code> waking up the <code>snd_cancel_thread()</code>.
A mutex, <code>g_mtx_sound_list</code>, is used to synchronize access to <code>g_sound_list[]</code> and <code>g_cancel_list[]</code>.
</p>

<div class="org-src-container">
<label class="org-src-name"><span class="listing-number">Listing 2: </span><i>Array storing indices (into <code>g_sound_list[]</code>) of <code>Miniaudio</code> resources to release.</i></label><pre class="src src-C"><span class="linenr">0: </span>// Indices into g_sound_list[] of sounds/resources to be cancelled &amp; freed.
<span class="linenr">1: </span>// Only indices stored in g_cancel_list[0] .. g_cancel_list[g_cancel_list_end - 1]
<span class="linenr">2: </span>// are valid.
<span class="linenr">3: </span>int g_cancel_list_end = 0;
<span class="linenr">4: </span>int g_cancel_list[MAX_SOUNDS];
<span class="linenr">5: </span>
<span class="linenr">6: </span>// Synchronize access to g_sound_list[] and g_cancel_list[].
<span class="linenr">7: </span>pthread_mutex_t g_mtx_sound_list = PTHREAD_MUTEX_INITIALIZER;
</pre>
</div>

<p>
All of this functionality will eventually be used in LISP through <code>CFFI</code>.
</p>
</div>
</div>

<div id="outline-container-orgf7c4452" class="outline-2">
<h2 id="orgf7c4452"><span class="section-number-2">2.</span> REGION-BASED MEMORY MANAGEMENT</h2>
<div class="outline-text-2" id="text-2">
<p>
We would prefer that our LISP code not call <code>malloc()</code> and <code>free()</code>.  It is expected that
sounds will be loaded into memory when our program starts.
</p>

<p>
<code>stk-alloc.c</code> allocates memory blocks by simply advancing a pointer <code>g_p_next</code> when a
block is requested (<code>stkalloc_get_mem()</code>).  Calling <code>stkalloc_free(p)</code> adjusts <code>g_p_next</code>
to <code>p</code> and so everything allocated after <code>p</code> is released as well.
</p>
</div>
</div>

<div id="outline-container-org90632d6" class="outline-2">
<h2 id="org90632d6"><span class="section-number-2">3.</span> PLAYING SOUNDS PRELOADED IN MEMORY</h2>
<div class="outline-text-2" id="text-3">
<p>
So far all of the code for sound playback lives in a test program, <code>simple-playback.c</code>.
In today's livestream, we will:
</p>
<ol class="org-ol">
<li>Load several sound files into memory using <code>libstackalloc</code>.</li>
<li>Provide some sort of UI for playing and cancelling sounds.</li>
</ol>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Calling <code>ma_device_uninit()</code> and <code>ma_decoder_uninit()</code> will also stop a sound currently playing.
</p></div></div>


</div>
</div><div class="taglist"></div>
<h3>END</h3>

<hr>

]]></description>
  <link>./2024-07-28-playing-sounds-using-in-memory-blobs.html</link>
  <guid>./2024-07-28-playing-sounds-using-in-memory-blobs.html</guid>
  <pubDate>Sun, 28 Jul 2024 21:34:00 -0700</pubDate>
</item>
<item>
  <title><![CDATA[First Blog Post]]></title>
  <description><![CDATA[
<p>
<b>Summary:</b> This is a first test-post.  In the future each of my livestreams
will have a companion blog post here.
</p>

<div id="outline-container-orgb3824fb" class="outline-2">
<h2 id="orgb3824fb"><span class="section-number-2">1.</span> THE PROJECT</h2>
<div class="outline-text-2" id="text-1">
<p>
I'm writing a game in Common Lisp and C (using CFFI).
So far I have:
</p>
<ol class="org-ol">
<li>A basic UI with graphics.</li>
<li>Sounds (played asynchronously).</li>
<li>Simple (region-based) memory management to store sounds, bitmaps, sprites etc.</li>
<li>Some supporting Lisp code.</li>
</ol>
</div>
</div>

<div id="outline-container-orgca68792" class="outline-2">
<h2 id="orgca68792"><span class="section-number-2">2.</span> MODULE (OR PACKAGE) DEPENDENCIES.</h2>
<div class="outline-text-2" id="text-2">

<figure id="orgb5a0a0f">
<img src="modules.jpg" alt="modules.jpg">

<figcaption><span class="figure-number">Figure 1: </span><i>This diagram shows the approximate structure of the program.</i></figcaption>
</figure>
</div>
</div>

<div id="outline-container-org56ab80b" class="outline-2">
<h2 id="org56ab80b"><span class="section-number-2">3.</span> SOURCE CODE</h2>
<div class="outline-text-2" id="text-3">
<p>
Github repository forthcoming.
</p>
</div>
</div>
<div class="taglist"></div>
<h3>END</h3>

<hr>

]]></description>
  <link>./2024-07-28-first-blog-post.html</link>
  <guid>./2024-07-28-first-blog-post.html</guid>
  <pubDate>Sun, 28 Jul 2024 19:11:00 -0700</pubDate>
</item>
</channel>
</rss>
