<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[]]></title>
<description><![CDATA[]]></description>
<link>./</link>
<lastBuildDate>Mon, 05 Aug 2024 14:19:49 -0700</lastBuildDate>
<item>
  <title><![CDATA[Error Handling in the sound.c Module]]></title>
  <description><![CDATA[
<p>
<b>Previous livestreams</b>
</p>

<p>
<a href="https://www.youtube.com/watch?v=5OrYG_7_uHY">https://www.youtube.com/watch?v=5OrYG_7_uHY</a>
</p>

<p>
<a href="https://www.youtube.com/watch?v=L-ri_PFpmcA">https://www.youtube.com/watch?v=L-ri_PFpmcA</a>
</p>

<div id="outline-container-org6016fd6" class="outline-2">
<h2 id="org6016fd6"><span class="section-number-2">1.</span> Today's Agenda</h2>
<div class="outline-text-2" id="text-1">
<p>
The wrapper code for Miniaudio <sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup> low-level playback has been added to
<code>sound.c</code> and all compiler errors removed.  It is time to walk through
the code to convince myself that it's correct.  I will also add error-handling
and error-cleanup code as described below.
</p>
</div>
</div>

<div id="outline-container-org1e70dfe" class="outline-2">
<h2 id="org1e70dfe"><span class="section-number-2">2.</span> Error-Handling and Cleanup</h2>
<div class="outline-text-2" id="text-2">
<p>
I'm going to call this a "crabs in a bucket" strategy: "If I couldn't do something
then no one else can either."  Any pthreads or Miniaudio function call that returns
an error code will result in:
</p>
<ol class="org-ol">
<li>The line number, API, and error code are saved into global variables.</li>
<li>A global flag: <code>g_something_failed</code> is set to true.</li>
</ol>
<p>
Every function call in <code>sound.c</code> will begin with code similar to:
</p>
<div class="org-src-container">
<pre class="src src-C">if (atomic_load(&amp;g_something_failed))
  return /* some error code */
</pre>
</div>
<p>
Lisp code that calls exported functions in <code>libsound.so</code> should check for error codes.
On receiving an error the Lisp code should signal an error and provide restarts <sup><a id="fnr.2" class="footref" href="#fn.2" role="doc-backlink">2</a></sup> if
appropriate.
</p>
</div>
</div>
<div id="outline-container-org83861d5" class="outline-2">
<h2 id="org83861d5"><span class="section-number-2">3.</span> Error Cleanup</h2>
<div class="outline-text-2" id="text-3">
<p>
The destructor function in <code>sound.c</code> :
</p>
<div class="org-src-container">
<pre class="src src-C">void __attribute__((destructor)) snd_shared_object_uninit(void)
</pre>
</div>
<p>
Should terminate <code>snd_cancel_thread()</code> with:
</p>
<div class="org-src-container">
<pre class="src src-C">atomic_store(&amp;g_stop_cancel_thread, true);  // stop snd_cancel_thread() if it's awake and running.
pthread_mutex_lock(&amp;g_mtx_sound_list);
pthread_cond_signal(&amp;g_cnd_cancel);  // get snd_cancel_thread() ready to wake
pthread_mutex_unlock(&amp;g_mtx_sound_list);  // wake snd_cancel_thread().
</pre>
</div>
<p>
When <code>snd_cancel_thread()</code> is awakened it will free up any Miniaudio resources in use.
</p>

<p>
<b>END</b>
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
See <a href="https://miniaud.io/">https://miniaud.io/</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
One such restart might be to unload then reload <code>libsound.so</code> and continue program execution.
</p>
<hr></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>./2024-08-05-error-handling-in-the-sound.c-module.html</link>
  <guid>./2024-08-05-error-handling-in-the-sound.c-module.html</guid>
  <pubDate>Mon, 05 Aug 2024 12:15:00 -0700</pubDate>
</item>
<item>
  <title><![CDATA[Continuing Sound-Related Coding]]></title>
  <description><![CDATA[
<p>
<b>Prevous livestream:</b>
</p>

<p>
<a href="https://youtube.com/live/i-WEMsvJoJw">https://youtube.com/live/i-WEMsvJoJw</a>
</p>

<p>
In my last livestream, I "tested" asychronous sound playback/stop using
Miniaudio's <sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup> low-level API.  All of this code lived in <code>simple-playback.c</code> which was
intended as a proof-of-concept.  Today I'll be moving code to <code>sound.c</code> which
compiles to a dynamically-loaded library <code>libsound.so</code>.  Once we have a working
<code>libsound</code> we can stress-test our sound code in Lisp.
</p>

<p>
<b>Warning:</b> this will be sleep-inducing as it's mostly copy/paste and fixing compilation errors.
</p>

<p>
<b>2nd Warning:</b> it's a lovely afternoon outside and I have my patio door open, which means
there might be some noise in the background.
</p>

<p>
<b>END</b>
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
See <a href="https://miniaud.io/">https://miniaud.io/</a>
</p>
<hr></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>./2024-08-03-moving-code-to-sound.c-shared-object.html</link>
  <guid>./2024-08-03-moving-code-to-sound.c-shared-object.html</guid>
  <pubDate>Sat, 03 Aug 2024 13:04:00 -0700</pubDate>
</item>
<item>
  <title><![CDATA[Testing Sound Playback]]></title>
  <description><![CDATA[
<p>
<b>Previous livestreams:</b>
</p>

<p>
<a href="https://www.youtube.com/watch?v=49ojU19ruHk">https://www.youtube.com/watch?v=49ojU19ruHk</a>
</p>

<p>
<a href="https://www.youtube.com/watch?v=8zS1ABTCTmos">https://www.youtube.com/watch?v=8zS1ABTCTmos</a>
</p>

<div id="outline-container-org519e0bd" class="outline-2">
<h2 id="org519e0bd"><span class="section-number-2">1.</span> Today's Agenda</h2>
<div class="outline-text-2" id="text-1">
<p>
I  have  a  small  test   program,  <code>simple-playback.c</code>,  which  uses  Miniaudio
(<a href="https://miniaud.io/">https://miniaud.io/</a>)   for  asychronous   sound   playback  and   cancellation.
<code>simple-playback.c</code>  is  a  "wrapper"  around Miniaudio's  low-level  API.   The
low-level  API  must  be  used  to play sound  files  preloaded  into  memory  (see
<a href="2024-07-28-playing-sounds-using-in-memory-blobs.html">Livestream  post 28-July-24</a>)  The wrapper  code in  <code>simple-playback.c</code> will  be
tested today  (hopefully) and I'll  begin moving functions prefixed  with <code>snd_</code>
over to the <code>sound.c</code> module.  <code>sound.c</code> compiles to <code>libsound.so</code>.  Once that's
complete, we should be able to use Lisp/CFFI to call exported functions from the
Lisp REPL.
</p>
</div>
</div>

<div id="outline-container-org338099c" class="outline-2">
<h2 id="org338099c"><span class="section-number-2">2.</span> Exporting C Functions to Lisp</h2>
<div class="outline-text-2" id="text-2">
<p>
A note about what  I mean by "exporting functions to Lisp/CFFI".   I have a Lisp
program <code>cffi-gen.lisp</code> which parses a limited form of C function declarations:
</p>


<figure id="org03d8130">
<img src="./CFFI-line-syntax.PNG" alt="CFFI-line-syntax.PNG" width="65%">

<figcaption><span class="figure-number">Figure 1: </span><i>Syntax for C functions exported to Lisp/CFFI. (using: <a href="https://www.bottlecaps.de/rr/ui">https://www.bottlecaps.de/rr/ui</a>)</i></figcaption>
</figure>

<p>
and produces the appropriate Lisp/CFFI <code>defcfun</code>.  <i>type-names</i> and the <i>parameter-list</i> are
severly restricted but adequate for this project.
</p>

<p>
For example, the C function declaration:
</p>

<div class="org-src-container">
<pre class="src src-C">void ui_set_kbd_repeat(uint32_t timeout_ms, uint32_t delay_ms)  // EXPORT
</pre>
</div>

<p>
Produces:
</p>

<div class="org-src-container">
<pre class="src src-lisp"><span class="linenr">0: </span>(cffi:defcfun ("ui_set_kbd_repeat" set-kbd-repeat) :void
<span class="linenr">1: </span>              (timeout-ms :uint32)
<span class="linenr">2: </span>              (delay-ms :uint32))
<span class="linenr">3: </span>(export 'set-kbd-repeat)
</pre>
</div>

<p>
when run through <code>cffi-gen.lisp</code>.
</p>

<p>
<b>END</b>
</p>
<hr>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>./2024-07-30-testing-sound-playback.html</link>
  <guid>./2024-07-30-testing-sound-playback.html</guid>
  <pubDate>Tue, 30 Jul 2024 12:54:00 -0700</pubDate>
</item>
<item>
  <title><![CDATA[Playing Sounds Using In-Memory BLOBS]]></title>
  <description><![CDATA[
<p>
<b>Binary large object (BLOB)</b>
<i>is a generic term used to  describe the handling and</i>
<i>storage of  long strings  of data by  database management systems.  A BLOB  is a</i>
<i>category of data,  characterized by large size (including media  formats such as</i>
<i>audio and video), which can place extreme demands on storage systems and network</i>
<i>bandwidth.</i>
<a href="https://www.gartner.com/en/information-technology/glossary/blob-binary-large-object">Gartner.com</a>
</p>

<p>
<b>Summary:</b> I  briefly describe how  thread-based resource management is  used in
<del><code>sound.c</code></del> <code>simple-playback.c</code>  and how it  will be modified to  play preloaded
sound files residing in memory.
</p>

<div id="outline-container-orgfb9627d" class="outline-2">
<h2 id="orgfb9627d"><span class="section-number-2">1.</span> SOUND PLAYBACK AND RESOURCE MANAGEMENT.</h2>
<div class="outline-text-2" id="text-1">
<p>
<code>Miniaudio</code> has a simple way of playing a sound file:
<code>ma_engine_play_sound()</code> which is adequate for asynchronously loading and
playing sounds.  We would like to preload sounds and play them from memory but
there is no simple high-level function for this.  We must resort to <code>Miniaudio</code>'s
"low-level" API.
</p>

<p>
To play sounds through the low-level API we must:
</p>
<ol class="org-ol">
<li>Create an <code>ma_decoder</code> from a file or block of memory.  The decoder must
be configured for sample format, channel count, and sample rate.</li>
<li>An <code>ma_device</code> must be configured and initialized.  The device contains references
to the decoder created in step 1 as well as a callback function which uses the decoder to
provide <code>Miniaudio</code> with frames (a frame is a set of samples: one per channel).</li>
<li>We must start the device. This begins playing the sound.</li>
</ol>

<p>
End of playback is detected in our data callback:
</p>

<div class="org-src-container">
<pre class="src src-C">if (MA_AT_END == ma_decoder_read_pcm_frames(pDecoder, pOutput, frameCount, NULL))
  // ...
</pre>
</div>

<p>
And we free Miniaudio resources with <code>ma_device_uninit()</code> and <code>ma_decoder_uninit()</code> but
this <i>must not happen</i> in the data callback, it must occur in another thread. <sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>
To overcome this restriction we have a separate thread function, <code>snd_cancel_thread()</code>:
which calls <code>ma_(device|decoder)_uninit()</code> when a condition <code>g_cnd_cancel</code> is
signalled.
</p>

<p>
In <code>sound.c</code>,  devices and decoders  are stored in an  array: <code>g_sound_list[]</code>.
Each entry  in <code>g_sound_list[]</code> is a  structure which holds an  "is available"
flag:
</p>

<div class="org-src-container">
<label class="org-src-name"><span class="listing-number">Listing 1: </span><i>Data structures for storing sounds during playback.</i></label><pre class="src src-C"><span class="linenr"> 0: </span>typedef struct
<span class="linenr"> 1: </span>{
<span class="linenr"> 2: </span>  ma_device        s_device;
<span class="linenr"> 3: </span>  ma_device_config s_device_config;
<span class="linenr"> 4: </span>  ma_decoder       s_decoder;
<span class="linenr"> 5: </span>  atomic_bool      s_cancel_sent;
<span class="linenr"> 6: </span>  atomic_bool      s_is_available;
<span class="linenr"> 7: </span>  int              s_idx_sound_list;
<span class="linenr"> 8: </span>} sound_t;
<span class="linenr"> 9: </span>
<span class="linenr">10: </span>// Array of sound resources.
<span class="linenr">11: </span>// IF g_sound_list[i].s_is_available &amp;&amp; !g_sound_list[i].s_cancel_sent THEN:
<span class="linenr">12: </span>//
<span class="linenr">13: </span>//   slot i may be used as a decoder and device to play a sound.
<span class="linenr">14: </span>//
<span class="linenr">15: </span>// NOTE that there is no free list of available slots.  The list must be scanned to find
<span class="linenr">16: </span>// a free slot i.
<span class="linenr">17: </span>#define MAX_SOUNDS 25
<span class="linenr">18: </span>sound_t g_sound_list[MAX_SOUNDS];
</pre>
</div>

<p>
Sound playback is achieved  with <code>snd_play_file_async()</code> which finds an
index of an available device/decoder and then proceeds with steps 1-3 above.  And
the resources in <code>g_sound_list[</code> <i>&lt;index&gt;</i> <code>]</code> are made unavailable.
</p>

<p>
Cancellation of a sound can occur when a sound has completed playing or during
playback.  <code>snd_cancel_async()</code> places the an index of an entry in <code>g_sound_list[]</code>
onto <code>g_cancel_list[]</code> and signals <code>g_cnd_cancel</code> waking up the <code>snd_cancel_thread()</code>.
A mutex, <code>g_mtx_sound_list</code>, is used to synchronize access to <code>g_sound_list[]</code> and <code>g_cancel_list[]</code>.
</p>

<div class="org-src-container">
<label class="org-src-name"><span class="listing-number">Listing 2: </span><i>Array storing indices (into <code>g_sound_list[]</code>) of <code>Miniaudio</code> resources to release.</i></label><pre class="src src-C"><span class="linenr">0: </span>// Indices into g_sound_list[] of sounds/resources to be cancelled &amp; freed.
<span class="linenr">1: </span>// Only indices stored in g_cancel_list[0] .. g_cancel_list[g_cancel_list_end - 1]
<span class="linenr">2: </span>// are valid.
<span class="linenr">3: </span>int g_cancel_list_end = 0;
<span class="linenr">4: </span>int g_cancel_list[MAX_SOUNDS];
<span class="linenr">5: </span>
<span class="linenr">6: </span>// Synchronize access to g_sound_list[] and g_cancel_list[].
<span class="linenr">7: </span>pthread_mutex_t g_mtx_sound_list = PTHREAD_MUTEX_INITIALIZER;
</pre>
</div>

<p>
All of this functionality will eventually be used in LISP through <code>CFFI</code>.
</p>
</div>
</div>

<div id="outline-container-org71585c9" class="outline-2">
<h2 id="org71585c9"><span class="section-number-2">2.</span> REGION-BASED MEMORY MANAGEMENT</h2>
<div class="outline-text-2" id="text-2">
<p>
We would prefer that our LISP code not call <code>malloc()</code> and <code>free()</code>.  It is expected that
sounds will be loaded into memory when our program starts.
</p>

<p>
<code>stk-alloc.c</code> allocates memory blocks by simply advancing a pointer <code>g_p_next</code> when a
block is requested (<code>stkalloc_get_mem()</code>).  Calling <code>stkalloc_free(p)</code> adjusts <code>g_p_next</code>
to <code>p</code> and so everything allocated after <code>p</code> is released as well.
</p>
</div>
</div>

<div id="outline-container-org9b8888c" class="outline-2">
<h2 id="org9b8888c"><span class="section-number-2">3.</span> PLAYING SOUNDS PRELOADED IN MEMORY</h2>
<div class="outline-text-2" id="text-3">
<p>
So far all of the code for sound playback lives in a test program, <code>simple-playback.c</code>.
In today's livestream, we will:
</p>
<ol class="org-ol">
<li>Load several sound files into memory using <code>libstackalloc</code>.</li>
<li>Provide some sort of UI for playing and cancelling sounds.</li>
</ol>

<p>
<b>END</b>
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Calling <code>ma_device_uninit()</code> and <code>ma_decoder_uninit()</code> will also stop a sound currently playing.
</p>
<hr></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>./2024-07-28-playing-sounds-using-in-memory-blobs.html</link>
  <guid>./2024-07-28-playing-sounds-using-in-memory-blobs.html</guid>
  <pubDate>Sun, 28 Jul 2024 21:34:00 -0700</pubDate>
</item>
<item>
  <title><![CDATA[First Blog Post]]></title>
  <description><![CDATA[
<p>
<b>Summary:</b> This is a first test-post.  In the future each of my livestreams
will have a companion blog post here.
</p>

<div id="outline-container-org93642d9" class="outline-2">
<h2 id="org93642d9"><span class="section-number-2">1.</span> THE PROJECT</h2>
<div class="outline-text-2" id="text-1">
<p>
I'm writing a game in Common Lisp and C (using CFFI).
So far I have:
</p>
<ol class="org-ol">
<li>A basic UI with graphics.</li>
<li>Sounds (played asynchronously).</li>
<li>Simple (region-based) memory management to store sounds, bitmaps, sprites etc.</li>
<li>Some supporting Lisp code.</li>
</ol>
</div>
</div>

<div id="outline-container-orgc54803c" class="outline-2">
<h2 id="orgc54803c"><span class="section-number-2">2.</span> MODULE (OR PACKAGE) DEPENDENCIES.</h2>
<div class="outline-text-2" id="text-2">

<figure id="org8967a7a">
<img src="modules.jpg" alt="modules.jpg">

<figcaption><span class="figure-number">Figure 1: </span><i>This diagram shows the approximate structure of the program.</i></figcaption>
</figure>
</div>
</div>

<div id="outline-container-org847b0a5" class="outline-2">
<h2 id="org847b0a5"><span class="section-number-2">3.</span> SOURCE CODE</h2>
<div class="outline-text-2" id="text-3">
<p>
Github repository forthcoming.
</p>

<p>
<b>END</b>
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>./2024-07-28-first-blog-post.html</link>
  <guid>./2024-07-28-first-blog-post.html</guid>
  <pubDate>Sun, 28 Jul 2024 19:11:00 -0700</pubDate>
</item>
</channel>
</rss>
