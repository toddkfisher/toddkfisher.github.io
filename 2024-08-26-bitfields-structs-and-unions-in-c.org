#+title: Sound Playback Identifiers: Using Bitfields, Structs and Unions Instead of Handwritten Shifting, Masking and Or-ing
#+date: <2024-08-26 10:43>
#+description: 
#+filetags: bitfields, structs, unions, Clang

* Motivation for Using Bitfields.
  In my last programming-related post [fn:tighteningup], I described how sound playback resources in
  Miniaudio [fn:ma] are referenced with a single ~uint32_t~:
  
    - 6 bit index into an array of Miniaudio resources ~g_sound_list[]~
    - 26 bit playback serial number uniquely identifies a sound playback
      request.
      
  Both fields are doing double-duty:
  
    - If first 6 bits = ~#b111111~ then the following 26 bits are an error code.

  Indices, serial numbers, and error-codes are set and accessed with seven functions in
  the ~sound.c~ module.  These are simple shift (~<<~), mask (~&~), and or (~|~) bit
  manipulation functions.

  A cleaner solution would use bitfields and let the compiler generate the
  shifting, masking, and or-ing.

* Two Different Definitions.

  My first attempt at using bitfields:
  
#+caption: /Playback ID structure using unions and bitfields/.
#+name: lst:struct-union-bitfield-id
#+begin_src C -n 0
  typedef struct struct __attribute__((packed))
  {
    union 
    {
      uint8_t id_idx : 6;
      int8_t id_err_flag : 6;
    };
    union 
    {
      uint32_t id_serial_n : 26;
      uint32_t id_error_code : 26;
    };
  } playback_id_t;
#+end_src

  I expected ~sizeof(playback_id_t) == 4~ but it turned out to be 5 bytes so I abandoned
  the idea for a while.  Another definition does yield ~sizeof(playback_id_t) == 4~:

#+caption: /Second attempt at defining playback ID structure./
#+name: lst:bitfield-only-id
#+begin_src C -n 0  
  typedef struct struct __attribute__((packed))
  {
    int8_t   id_idx_or_error_flag : 6;
    uint32_t id_serial_or_error_code : 26;
  } playback_id_t;
#+end_src
  So my compiler doesn't seem to be as smart as I'd hoped.
  I'm happy with [[lst:bitfield-only-id]] and I'll use that.

* Warning
  The C standard makes no guarantees about the ordering of bitfields.  In my initial
  shift/mask/or implementation this was completely under my control.  In Lisp code
  I could simply assume that an error flag test could be written:
  
#+begin_src lisp
  (let ((playback-id (snd:play-file-async "some-sound.mp3")))
      (when (= (logand #x3f playback-id) #x3f)
          ; Error
      ; ...
#+end_src

  We'll have to do some testing and see what happens when we use bitfields.

* Today's Agenda
  0. Fidget around and test bit ordering in [[lst:bitfield-only-id]].
  1. Add definition [[lst:bitfield-only-id]] to ~sound.c~.
  2. Replace shift/mask/... function calls on ~playback_id~ values with ordinary
     field references
 
[fn:tighteningup] [[./2024-08-18-tightening-up-sound-c.html][Tightening Up sound.c]]  

[fn:ma] See https://miniaud.io/  
  
